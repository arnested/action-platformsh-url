name: "Platform.sh - Get Environment URL"
description: "Detecting if PlatformSH is building an environment, and returning the URL when it's done deploying."
branding:
  icon: "download-cloud"
  color: "blue"

inputs:
  PLATFORMSH_KEY:
    description: "API key for connecting to Platform.sh"
    required: true
    type: string

  PLATFORMSH_ID:
    description: "ID for the Platform.sh project."
    required: true
    type: string

  ALLOW_CANCEL_CRON:
    description: "Can we cancel on-going crons, to speed up deployment? default: 0"
    default: 0
    required: false
    type: integer

  ENVIRONMENT_NAME:
    description: "Which environment to check against - defaults to pr-NUMBER"
    default: "pr-${{ github.event.pull_request.number }}"
    required: false
    type: string

  ACTIVITY_TYPES:
    description: "Types of deployments to wait for. Default: push - See types here: https://docs.platform.sh/integrations/activity/reference.html#type"
    default: "push"
    required: true
    type: string

  PSH_DETECTION_WAIT:
    description: "How long should we maximum wait for PSH to detect the push? If the branch doesnt exist in the PlatformSH GIT Remote, this is how long the action will take. Actually inactive environments get detected instantly. Default: 60 seconds."
    default: 60
    required: false
    type: integer

outputs:
  url:
    description: "The ready-to-connect URL"
    value: ${{ steps.platformsh_url.outputs.url }}

runs:
  using: "composite"
  steps:
    - name: Setup PHP and disable opcache
      uses: shivammathur/setup-php@v2
      with:
        php-version: "8.1"
        extensions: none, curl, json, mbstring, pcre, phar
    - name: Get PlatformSH URL
      shell: bash
      id: platformsh_url
      run: |
        set +e

        sleep 5s

        export PLATFORMSH_CLI_NO_INTERACTION=1;
        export PLATFORM_PROJECT=${{ inputs.PLATFORMSH_ID }};
        export PLATFORM_BRANCH=${{ inputs.ENVIRONMENT_NAME }};
        export PLATFORMSH_CLI_TOKEN=${{ inputs.PLATFORMSH_KEY }};

        curl -fsS https://platform.sh/cli/installer | php

        if [[ "${{ inputs.ALLOW_CANCEL_CRON }}" == 1 ]]; then \
            ~/.platformsh/bin/platform activity:cancel --type=environment.cron --all; \
        fi

        DETECTION_TRIES=0
        TRIES=0
        SUCCESS=0

        DELAY_BETWEEN_ATTEMPTS=5;
        MAX_DETECTION_SECONDS=${{ inputs.PSH_DETECTION_WAIT }};
        MAX_DETECTION_TRIES=$(( MAX_DETECTION_SECONDS / DELAY_BETWEEN_ATTEMPTS ));
        MAX_WAIT_SECONDS=900;
        echo "We will wait for a maximum of $MAX_DETECTION_SECONDS secs for PSH to detect a deploy, and a max of $MAX_WAIT_SECONDS secs for the deployment to finish."
        MAX_TRIES=$(( 900 / DELAY_BETWEEN_ATTEMPTS ));

        echo "We will now detect the PSH activities. You can view the deployment log using";
        echo "  platform activity:log [ID] -p ${{ inputs.PLATFORMSH_ID }} -e ${{ inputs.ENVIRONMENT_NAME }}";
        echo "----------------------";
        echo "";

        while [ $DETECTION_TRIES -le $MAX_DETECTION_TRIES ] && [ $TRIES -le $MAX_TRIES ]; do \
          DETECTION_TRIES=$((DETECTION_TRIES+1)); \
          TRIES=$((TRIES+1)); \
          ACTS=$(~/.platformsh/bin/platform activities --format=plain --columns=id,state --incomplete --no-header --no-interaction --type=${{ inputs.ACTIVITY_TYPES }} 2>&1 || true); \
          if [[ "$ACTS" =~ "pending" || "$ACTS" =~ "in progress" ]]; then \
            DETECTION_TRIES=0; \
          else \
            echo "detect tries: $DETECTION_TRIES / $MAX_DETECTION_TRIES"; \
          fi; \

          if [[ "$ACTS" =~ "No activities found" ]]; then SUCCESS=1; break; fi; \

          echo "total  tries: $TRIES / $MAX_TRIES"; \

          echo "$ACTS"; \
          echo "----------------------"; \

          sleep $DELAY_BETWEEN_ATTEMPTS; \
        done
        echo ""

        STATUS=$(~/.platformsh/bin/platform env:info status 2>&1 || true)

        if [[ "$STATUS" =~ "inactive" ]]; then \
          echo "PlatformSH reports that the environment is not active. This might be because you have run out of available environment slots. Try to run 'platform env:activate -e ${{ inputs.ENVIRONMENT_NAME }} -p ${{ inputs.PLATFORMSH_ID }}'"; \
          exit 2; \
        elif [[ "$SUCCESS" == 0 ]]; then \
          echo "$STATUS"; \
          exit 2; \
        fi

        URL=$(~/.platformsh/bin/platform env:url -1 --pipe)

        CURL_HTTP_STATUS=$(curl -L -s -o /dev/null -w "%{http_code}" $URL)

        if [[ "$CURL_HTTP_STATUS" != "200" ]]; then \
          echo "PlatformSH reports the environment is ready, but cURL could not connect to it. You may have pushed a broken build."; \
          echo "URL: $URL"; \
          echo "HTTP Status Code: $CURL_HTTP_STATUS"; \
          exit 2; \
        fi

        echo "url=$URL" >> $GITHUB_OUTPUT

        echo "$URL is active - you can use it as $ {{ [..].outputs.url }}"; \
